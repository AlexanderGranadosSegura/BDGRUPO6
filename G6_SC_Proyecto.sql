-- 1. Tabla ROL
CREATE TABLE FIDE_ROL_TB (
    id_rol NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_ROL_ID_ROL_PK PRIMARY KEY (id_rol)
);
-- 2. Tabla USUARIO
CREATE TABLE FIDE_USUARIO_TB (
    id_usuario NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    correo VARCHAR2(150) UNIQUE NOT NULL,
    contrasena VARCHAR2(150) NOT NULL,
    id_rol NUMBER,
    CONSTRAINT FIDE_USUARIO_ID_USUARIO_PK PRIMARY KEY (id_usuario),
    CONSTRAINT FIDE_USUARIO_ID_ROL_FK FOREIGN KEY (id_rol) REFERENCES FIDE_ROL_TB(id_rol)
);
-- 3. Tabla CATEGORIA
CREATE TABLE FIDE_CATEGORIA_TB (
    id_categoria NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_CATEGORIA_ID_CATEGORIA_PK PRIMARY KEY (id_categoria)
);
-- 4. Tabla UNIDAD_MEDIDA
CREATE TABLE FIDE_UNIDAD_MEDIDA_TB (
    id_unidad_medida NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_UNIDAD_MEDIDA_ID_UNIDAD_MEDIDA_PK PRIMARY KEY (id_unidad_medida)
);
-- 5. Tabla PRODUCTO
CREATE TABLE FIDE_PRODUCTO_TB (
    id_producto NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(255),
    precio NUMBER(10,2) NOT NULL,
    id_categoria NUMBER,
    id_unidad_medida NUMBER,
    CONSTRAINT FIDE_PRODUCTO_ID_PRODUCTO_PK PRIMARY KEY (id_producto),
    CONSTRAINT FIDE_PRODUCTO_ID_CATEGORIA_FK FOREIGN KEY (id_categoria) REFERENCES FIDE_CATEGORIA_TB(id_categoria),
    CONSTRAINT FIDE_PRODUCTO_ID_UNIDAD_FK FOREIGN KEY (id_unidad_medida) REFERENCES FIDE_UNIDAD_MEDIDA_TB(id_unidad_medida)
);
-- 6. Tabla CLIENTE
CREATE TABLE FIDE_CLIENTE_TB (
    id_cliente NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    correo VARCHAR2(150) UNIQUE,
    telefono VARCHAR2(15),
    CONSTRAINT FIDE_CLIENTE_ID_CLIENTE_PK PRIMARY KEY (id_cliente)
);
-- 7. Tabla DIRECCION
CREATE TABLE FIDE_DIRECCION_TB (
    id_direccion NUMBER,
    id_cliente NUMBER,
    direccion VARCHAR2(255) NOT NULL,
    CONSTRAINT FIDE_DIRECCION_ID_DIRECCION_PK PRIMARY KEY (id_direccion),
    CONSTRAINT FIDE_DIRECCION_ID_CLIENTE_FK FOREIGN KEY (id_cliente) REFERENCES FIDE_CLIENTE_TB(id_cliente)
);
-- 8. Tabla PROVINCIA
CREATE TABLE FIDE_PROVINCIA_TB (
    id_provincia NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_PROVINCIA_ID_PROVINCIA_PK PRIMARY KEY (id_provincia)
);
-- 9. Tabla CANTON
CREATE TABLE FIDE_CANTON_TB (
    id_canton NUMBER,
    id_provincia NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_CANTON_ID_CANTON_PK PRIMARY KEY (id_canton),
    CONSTRAINT FIDE_CANTON_ID_PROVINCIA_FK FOREIGN KEY (id_provincia) REFERENCES FIDE_PROVINCIA_TB(id_provincia)
);
-- 10. Tabla DISTRITO
CREATE TABLE FIDE_DISTRITO_TB (
    id_distrito NUMBER,
    id_canton NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_DISTRITO_ID_DISTRITO_PK PRIMARY KEY (id_distrito),
    CONSTRAINT FIDE_DISTRITO_ID_CANTON_FK FOREIGN KEY (id_canton) REFERENCES FIDE_CANTON_TB(id_canton)
);
-- 11. Tabla ESTADO_PEDIDO
CREATE TABLE FIDE_ESTADO_PEDIDO_TB (
    id_estado NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_ESTADO_PEDIDO_ID_ESTADO_PK PRIMARY KEY (id_estado)
);
-- 12. Tabla PEDIDO
CREATE TABLE FIDE_PEDIDO_TB (
    id_pedido NUMBER,
    fecha_pedido DATE NOT NULL,
    cantidad NUMBER NOT NULL,
    precio_unitario NUMBER(10,2) NOT NULL,
    subtotal NUMBER(10,2) NOT NULL,
    total NUMBER(10,2) NOT NULL,
    id_factura NUMBER,
    id_producto NUMBER,
    id_estado NUMBER,
    id_usuario NUMBER,
    id_cliente NUMBER,
    id_direccion NUMBER,
    CONSTRAINT FIDE_PEDIDO_ID_PEDIDO_PK PRIMARY KEY (id_pedido),
    CONSTRAINT FIDE_PEDIDO_ID_PRODUCTO_FK FOREIGN KEY (id_producto) REFERENCES FIDE_PRODUCTO_TB(id_producto),
    CONSTRAINT FIDE_PEDIDO_ID_ESTADO_FK FOREIGN KEY (id_estado) REFERENCES FIDE_ESTADO_PEDIDO_TB(id_estado),
    CONSTRAINT FIDE_PEDIDO_ID_USUARIO_FK FOREIGN KEY (id_usuario) REFERENCES FIDE_USUARIO_TB(id_usuario),
    CONSTRAINT FIDE_PEDIDO_ID_CLIENTE_FK FOREIGN KEY (id_cliente) REFERENCES FIDE_CLIENTE_TB(id_cliente),
    CONSTRAINT FIDE_PEDIDO_ID_DIRECCION_FK FOREIGN KEY (id_direccion) REFERENCES FIDE_DIRECCION_TB(id_direccion)
);
-- 13. Tabla INGRESO
CREATE TABLE FIDE_INGRESO_TB (
    id_ingreso NUMBER,
    id_producto NUMBER,
    cantidad NUMBER NOT NULL,
    fecha DATE NOT NULL,
    CONSTRAINT FIDE_INGRESO_ID_INGRESO_PK PRIMARY KEY (id_ingreso),
    CONSTRAINT FIDE_INGRESO_ID_PRODUCTO_FK FOREIGN KEY (id_producto) REFERENCES FIDE_PRODUCTO_TB(id_producto)
);
-- 14. Tabla EGRESO
CREATE TABLE FIDE_EGRESO_TB (
    id_egreso NUMBER,
    id_producto NUMBER,
    cantidad NUMBER NOT NULL,
    fecha DATE NOT NULL,
    CONSTRAINT FIDE_EGRESO_ID_EGRESO_PK PRIMARY KEY (id_egreso),
    CONSTRAINT FIDE_EGRESO_ID_PRODUCTO_FK FOREIGN KEY (id_producto) REFERENCES FIDE_PRODUCTO_TB(id_producto)
);
-- 15. Tabla INSUMO
CREATE TABLE FIDE_INSUMO_TB (
    id_insumo NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(255),
    id_unidad_medida NUMBER,
    CONSTRAINT FIDE_INSUMO_ID_INSUMO_PK PRIMARY KEY (id_insumo),
    CONSTRAINT FIDE_INSUMO_ID_UNIDAD_FK FOREIGN KEY (id_unidad_medida) REFERENCES FIDE_UNIDAD_MEDIDA_TB(id_unidad_medida)
);
ALTER TABLE FIDE_INSUMO_TB ADD (
    categoria NUMBER
);

-- 16. Tabla PROVEEDOR
CREATE TABLE FIDE_PROVEEDOR_TB (
    id_proveedor NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    correo VARCHAR2(150) UNIQUE,
    telefono VARCHAR2(15),
    CONSTRAINT FIDE_PROVEEDOR_ID_PROVEEDOR_PK PRIMARY KEY (id_proveedor)
);
-- 17. Tabla ORDEN_COMPRA
CREATE TABLE FIDE_ORDEN_COMPRA_TB (
    id_orden_compra NUMBER,
    id_proveedor NUMBER,
    fecha DATE NOT NULL,
    total NUMBER(10,2) NOT NULL,
    CONSTRAINT FIDE_ORDEN_COMPRA_ID_ORDEN_COMPRA_PK PRIMARY KEY (id_orden_compra),
    CONSTRAINT FIDE_ORDEN_COMPRA_ID_PROVEEDOR_FK FOREIGN KEY (id_proveedor) REFERENCES FIDE_PROVEEDOR_TB(id_proveedor)
);
-- 18. Tabla PRODUCTO_INSUMO
CREATE TABLE FIDE_PRODUCTO_INSUMO_TB (
    id_producto_insumo NUMBER,
    id_producto NUMBER,
    id_insumo NUMBER,
    CONSTRAINT FIDE_PRODUCTO_INSUMO_ID_PRODUCTO_INSUMO_PK PRIMARY KEY (id_producto_insumo),
    CONSTRAINT FIDE_PRODUCTO_INSUMO_ID_PRODUCTO_FK FOREIGN KEY (id_producto) REFERENCES FIDE_PRODUCTO_TB(id_producto),
    CONSTRAINT FIDE_PRODUCTO_INSUMO_ID_INSUMO_FK FOREIGN KEY (id_insumo) REFERENCES FIDE_INSUMO_TB(id_insumo)
);
-- 19. Tabla TIPO_EDIFICIO
CREATE TABLE FIDE_TIPO_EDIFICIO_TB (
    id_tipo_edificio NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT FIDE_TIPO_EDIFICIO_ID_TIPO_EDIFICIO_PK PRIMARY KEY (id_tipo_edificio)
);
-- 20. Tabla MESA
CREATE TABLE FIDE_MESA_TB (
    ID_MESA NUMBER(10) PRIMARY KEY,
    NUMERO_MESA NUMBER(3) NOT NULL,
    CAPACIDAD NUMBER(3) NOT NULL,
    UBICACION VARCHAR2(50) NOT NULL
);





--TODAS LAS VISTAS
-- Vista 1: Clientes con pedidos realizados
CREATE OR REPLACE VIEW FIDE_CLIENTES_CON_PEDIDOS_V AS
SELECT 
    C.id_cliente,
    C.nombre AS nombre_cliente,
    COUNT(P.id_pedido) AS cantidad_pedidos,
    SUM(P.total) AS total_gastado
FROM 
    FIDE_CLIENTE_TB C
LEFT JOIN 
    FIDE_PEDIDO_TB P ON C.id_cliente = P.id_cliente
GROUP BY 
    C.id_cliente, C.nombre;
-- Vista 2: Productos por categoría
CREATE OR REPLACE VIEW FIDE_PRODUCTOS_POR_CATEGORIA_V AS
SELECT 
    CAT.id_categoria,
    CAT.nombre AS nombre_categoria,
    P.id_producto,
    P.nombre AS nombre_producto,
    P.precio
FROM 
    FIDE_CATEGORIA_TB CAT
INNER JOIN 
    FIDE_PRODUCTO_TB P ON CAT.id_categoria = P.id_categoria;
-- Vista 3: Insumos por unidad de medida
CREATE OR REPLACE VIEW FIDE_INSUMOS_POR_UNIDAD_V AS
SELECT 
    U.id_unidad_medida,
    U.nombre AS unidad_medida,
    I.id_insumo,
    I.nombre AS nombre_insumo
FROM 
    FIDE_UNIDAD_MEDIDA_TB U
INNER JOIN 
    FIDE_INSUMO_TB I ON U.id_unidad_medida = I.id_unidad_medida;
-- Vista 4: Usuarios por rol
CREATE OR REPLACE VIEW FIDE_USUARIOS_POR_ROL_V AS
SELECT 
    R.id_rol,
    R.nombre AS nombre_rol,
    U.id_usuario,
    U.nombre AS nombre_usuario
FROM 
    FIDE_ROL_TB R
INNER JOIN 
    FIDE_USUARIO_TB U ON R.id_rol = U.id_rol;
-- Vista 5: Pedidos con su estado
CREATE OR REPLACE VIEW FIDE_PEDIDOS_CON_ESTADO_V AS
SELECT 
    P.id_pedido,
    P.fecha_pedido,
    P.total,
    E.nombre AS estado_pedido
FROM 
    FIDE_PEDIDO_TB P
INNER JOIN 
    FIDE_ESTADO_PEDIDO_TB E ON P.id_estado = E.id_estado;
-- Vista 6: Proveedores y órdenes de compra
CREATE OR REPLACE VIEW FIDE_PROVEEDORES_ORDENES_V AS
SELECT 
    PR.id_proveedor,
    PR.nombre AS nombre_proveedor,
    COUNT(OC.id_orden_compra) AS cantidad_ordenes,
    SUM(OC.total) AS total_compras
FROM 
    FIDE_PROVEEDOR_TB PR
LEFT JOIN 
    FIDE_ORDEN_COMPRA_TB OC ON PR.id_proveedor = OC.id_proveedor
GROUP BY 
    PR.id_proveedor, PR.nombre;
-- Vista 7: Productos más vendidos
CREATE OR REPLACE VIEW FIDE_PRODUCTOS_MAS_VENDIDOS_V AS
SELECT 
    P.id_producto,
    P.nombre AS nombre_producto,
    SUM(PED.cantidad) AS cantidad_vendida,
    SUM(PED.subtotal) AS ingresos_generados
FROM 
    FIDE_PRODUCTO_TB P
INNER JOIN 
    FIDE_PEDIDO_TB PED ON P.id_producto = PED.id_producto
GROUP BY 
    P.id_producto, P.nombre
ORDER BY 
    cantidad_vendida DESC;
-- Vista 8: Pedidos por cliente y dirección
CREATE OR REPLACE VIEW FIDE_PEDIDOS_CLIENTE_DIRECCION_V AS
SELECT 
    CL.id_cliente,
    CL.nombre AS nombre_cliente,
    DIR.direccion,
    PED.id_pedido,
    PED.total AS total_pedido
FROM 
    FIDE_CLIENTE_TB CL
INNER JOIN 
    FIDE_DIRECCION_TB DIR ON CL.id_cliente = DIR.id_cliente
INNER JOIN 
    FIDE_PEDIDO_TB PED ON CL.id_cliente = PED.id_cliente;
-- Vista 9: Insumos por proveedor
CREATE OR REPLACE VIEW FIDE_INSUMOS_POR_PROVEEDOR_V AS
SELECT 
    PROV.id_proveedor,
    PROV.nombre AS nombre_proveedor,
    OC.id_orden_compra,
    INS.id_insumo,
    INS.nombre AS nombre_insumo
FROM 
    FIDE_PROVEEDOR_TB PROV
INNER JOIN 
    FIDE_ORDEN_COMPRA_TB OC ON PROV.id_proveedor = OC.id_proveedor
INNER JOIN 
    FIDE_PRODUCTO_INSUMO_TB PI ON OC.id_orden_compra = PI.id_producto_insumo
INNER JOIN 
    FIDE_INSUMO_TB INS ON PI.id_insumo = INS.id_insumo;
-- Vista 10: Usuarios activos y roles
CREATE OR REPLACE VIEW FIDE_USUARIOS_ACTIVOS_V AS
SELECT 
    U.id_usuario,
    U.nombre AS nombre_usuario,
    R.nombre AS nombre_rol
FROM 
    FIDE_USUARIO_TB U
INNER JOIN 
    FIDE_ROL_TB R ON U.id_rol = R.id_rol
WHERE 
    U.correo IS NOT NULL; -- Considerando que usuarios activos tienen correo registrado
    
    
    
    
    
    
    
    
    
    
---Triggers
/
CREATE OR REPLACE TRIGGER FIDE_VALIDAR_PRECIO_PRODUCTO_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    IF :NEW.precio < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El precio del producto no puede ser negativo.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER FIDE_VALIDAR_CANTIDAD_PEDIDO_TRG
BEFORE INSERT OR UPDATE ON FIDE_PEDIDO_TB
FOR EACH ROW
BEGIN
    IF :NEW.cantidad <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'La cantidad del pedido debe ser mayor que cero.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER FIDE_VALIDAR_TOTAL_ORDEN_TRG
BEFORE INSERT OR UPDATE ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    IF :NEW.total <= 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'El total de la orden de compra debe ser mayor que cero.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER FIDE_VALIDAR_TELEFONO_CLIENTE_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTE_TB
FOR EACH ROW
BEGIN
    IF REGEXP_LIKE(:NEW.telefono, '[^0-9]') THEN
        RAISE_APPLICATION_ERROR(-20004, 'El teléfono del cliente debe contener solo números.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER FIDE_VALIDAR_CORREO_USUARIO_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF NOT REGEXP_LIKE(:NEW.correo, '@') THEN
        RAISE_APPLICATION_ERROR(-20007, 'El correo del usuario debe contener "@".');
    END IF;
END;
/ 















--Funciones
-- Función 1: Obtener el precio de un producto
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_OBTENER_PRECIO_FN (P_ID_PRODUCTO NUMBER)
RETURN NUMBER
IS
    V_PRECIO NUMBER;
BEGIN
    SELECT precio INTO V_PRECIO
    FROM FIDE_PRODUCTO_TB
    WHERE id_producto = P_ID_PRODUCTO;
    RETURN V_PRECIO;
END;
/
-- Función 2: Calcular el total de un pedido (cantidad * precio unitario)
CREATE OR REPLACE FUNCTION FIDE_PEDIDO_CALCULAR_TOTAL_FN (P_CANTIDAD NUMBER, P_PRECIO_UNITARIO NUMBER)
RETURN NUMBER
IS
    V_TOTAL NUMBER;
BEGIN
    V_TOTAL := P_CANTIDAD * P_PRECIO_UNITARIO;
    RETURN V_TOTAL;
END;
/
-- Función 3: Obtener el nombre de un cliente
CREATE OR REPLACE FUNCTION FIDE_CLIENTE_OBTENER_NOMBRE_FN (P_ID_CLIENTE NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT nombre INTO V_NOMBRE
    FROM FIDE_CLIENTE_TB
    WHERE id_cliente = P_ID_CLIENTE;
    RETURN V_NOMBRE;
END;
/
-- Función 4: Obtener el nombre de un producto
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_OBTENER_NOMBRE_FN (P_ID_PRODUCTO NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT nombre INTO V_NOMBRE
    FROM FIDE_PRODUCTO_TB
    WHERE id_producto = P_ID_PRODUCTO;
    RETURN V_NOMBRE;
END;
/
-- Función 5: Obtener el stock total de un producto
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_OBTENER_STOCK_FN (P_ID_PRODUCTO NUMBER)
RETURN NUMBER
IS
    V_STOCK NUMBER;
BEGIN
    SELECT 
        (SELECT NVL(SUM(cantidad), 0) FROM FIDE_INGRESO_TB WHERE id_producto = P_ID_PRODUCTO) -
        (SELECT NVL(SUM(cantidad), 0) FROM FIDE_EGRESO_TB WHERE id_producto = P_ID_PRODUCTO)
    INTO V_STOCK
    FROM DUAL;
    RETURN V_STOCK;
END;
/
-- Función 6: Obtener la dirección de un cliente
CREATE OR REPLACE FUNCTION FIDE_CLIENTE_OBTENER_DIRECCION_FN (P_ID_CLIENTE NUMBER)
RETURN VARCHAR2
IS
    V_DIRECCION VARCHAR2(255);
BEGIN
    SELECT direccion INTO V_DIRECCION
    FROM FIDE_DIRECCION_TB
    WHERE id_cliente = P_ID_CLIENTE;
    RETURN V_DIRECCION;
END;
/
-- Función 7: Verificar si un usuario existe
CREATE OR REPLACE FUNCTION FIDE_USUARIO_EXISTE_FN (P_CORREO VARCHAR2)
RETURN NUMBER
IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM FIDE_USUARIO_TB
    WHERE correo = P_CORREO;
    RETURN V_COUNT;
END;
/
-- Función 8: Calcular el subtotal de un pedido
CREATE OR REPLACE FUNCTION FIDE_PEDIDO_CALCULAR_SUBTOTAL_FN (P_CANTIDAD NUMBER, P_PRECIO_UNITARIO NUMBER)
RETURN NUMBER
IS
    V_SUBTOTAL NUMBER;
BEGIN
    V_SUBTOTAL := P_CANTIDAD * P_PRECIO_UNITARIO;
    RETURN V_SUBTOTAL;
END;
/
-- Función 9: Obtener el rol de un usuario
CREATE OR REPLACE FUNCTION FIDE_USUARIO_OBTENER_ROL_FN (P_ID_USUARIO NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE_ROL VARCHAR2(100);
BEGIN
    SELECT R.nombre INTO V_NOMBRE_ROL
    FROM FIDE_USUARIO_TB U
    INNER JOIN FIDE_ROL_TB R ON U.id_rol = R.id_rol
    WHERE U.id_usuario = P_ID_USUARIO;
    RETURN V_NOMBRE_ROL;
END;
/
-- Función 10: Contar los productos en una categoría
CREATE OR REPLACE FUNCTION FIDE_CATEGORIA_CONTAR_PRODUCTOS_FN (P_ID_CATEGORIA NUMBER)
RETURN NUMBER
IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM FIDE_PRODUCTO_TB
    WHERE id_categoria = P_ID_CATEGORIA;
    RETURN V_COUNT;
END;
/
-- Función 11: Calcular el total de una orden de compra
CREATE OR REPLACE FUNCTION FIDE_ORDEN_CALCULAR_TOTAL_FN (P_ID_ORDEN_COMPRA NUMBER)
RETURN NUMBER
IS
    V_TOTAL NUMBER;
BEGIN
    SELECT total INTO V_TOTAL
    FROM FIDE_ORDEN_COMPRA_TB
    WHERE id_orden_compra = P_ID_ORDEN_COMPRA;
    RETURN V_TOTAL;
END;
/
-- Función 12: Obtener el proveedor de una orden de compra
CREATE OR REPLACE FUNCTION FIDE_ORDEN_OBTENER_PROVEEDOR_FN (P_ID_ORDEN_COMPRA NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE_PROVEEDOR VARCHAR2(100);
BEGIN
    SELECT P.nombre INTO V_NOMBRE_PROVEEDOR
    FROM FIDE_ORDEN_COMPRA_TB OC
    INNER JOIN FIDE_PROVEEDOR_TB P ON OC.id_proveedor = P.id_proveedor
    WHERE OC.id_orden_compra = P_ID_ORDEN_COMPRA;
    RETURN V_NOMBRE_PROVEEDOR;
END;
/
-- Función 13: Verificar disponibilidad de stock
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_STOCK_DISPONIBLE_FN (P_ID_PRODUCTO NUMBER, P_CANTIDAD NUMBER)
RETURN VARCHAR2
IS
    V_STOCK NUMBER;
BEGIN
    V_STOCK := FIDE_PRODUCTO_OBTENER_STOCK_FN(P_ID_PRODUCTO);
    IF V_STOCK >= P_CANTIDAD THEN
        RETURN 'STOCK DISPONIBLE';
    ELSE
        RETURN 'STOCK INSUFICIENTE';
    END IF;
END;
/
-- Función 14: Obtener el nombre de una categoría
CREATE OR REPLACE FUNCTION FIDE_CATEGORIA_OBTENER_NOMBRE_FN (P_ID_CATEGORIA NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT nombre INTO V_NOMBRE
    FROM FIDE_CATEGORIA_TB
    WHERE id_categoria = P_ID_CATEGORIA;
    RETURN V_NOMBRE;
END;
/
-- Función 15: Obtener el nombre de una unidad de medida
CREATE OR REPLACE FUNCTION FIDE_UNIDAD_MEDIDA_OBTENER_NOMBRE_FN (P_ID_UNIDAD_MEDIDA NUMBER)
RETURN VARCHAR2
IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT nombre INTO V_NOMBRE
    FROM FIDE_UNIDAD_MEDIDA_TB
    WHERE id_unidad_medida = P_ID_UNIDAD_MEDIDA;
    RETURN V_NOMBRE;
END;
/





















--CRUDS
-- 1 FIDE_ROL_TB
-- Insertar un rol
CREATE OR REPLACE PROCEDURE FIDE_ROL_INSERTAR_SP (
P_ID_ROL IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_ROL_TB (id_rol, nombre)
VALUES (P_ID_ROL, P_NOMBRE);
END;
/
-- Actualizar un rol
CREATE OR REPLACE PROCEDURE FIDE_ROL_ACTUALIZAR_SP (
P_ID_ROL IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_ROL_TB
SET nombre = P_NOMBRE
WHERE id_rol = P_ID_ROL;
END;
/
-- Eliminar un rol
CREATE OR REPLACE PROCEDURE FIDE_ROL_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_ROL_TB
WHERE id_rol = P_ID;
END;
/
-- Obtener un rol por ID
CREATE OR REPLACE PROCEDURE FIDE_ROL_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_ROL_TB
WHERE id_rol = P_ID;
END;
/
-- 2 FIDE_USUARIO_TB
-- Insertar un usuario
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_INSERTAR_SP (
P_ID_USUARIO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_CONTRASENA IN VARCHAR2,
P_ID_ROL IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_USUARIO_TB (
id_usuario, nombre, correo, contrasena, id_rol
) VALUES (
P_ID_USUARIO, P_NOMBRE, P_CORREO, P_CONTRASENA, P_ID_ROL
);
END;
/
-- Actualizar un usuario
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_ACTUALIZAR_SP (
P_ID_USUARIO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_CONTRASENA IN VARCHAR2,
P_ID_ROL IN NUMBER
) IS
BEGIN
UPDATE FIDE_USUARIO_TB
SET nombre = P_NOMBRE,
correo = P_CORREO,
contrasena = P_CONTRASENA,
id_rol = P_ID_ROL
WHERE id_usuario = P_ID_USUARIO;
END;
/
-- Eliminar un usuario
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_USUARIO_TB
WHERE id_usuario = P_ID;
END;
/
-- Obtener un usuario por ID
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_USUARIO_TB
WHERE id_usuario = P_ID;
END;
/
-- Obtener datos de usuario por ID
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_OBTENER_POR_ID_SP (
P_ID_USUARIO IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
)
IS
BEGIN
OPEN P_RESULTADO FOR
SELECT id_usuario, nombre, correo, id_rol
FROM FIDE_USUARIO_TB
WHERE id_usuario = P_ID_USUARIO;
END;
/
 -- Cambiar password
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_CAMBIAR_PASSWORD_SP (
P_ID_USUARIO IN NUMBER,
P_NUEVA_CONTRASENA IN VARCHAR2
)
IS
BEGIN
UPDATE FIDE_USUARIO_TB
SET contrasena = P_NUEVA_CONTRASENA
WHERE id_usuario = P_ID_USUARIO;
END;
/
-- Verificar Password 
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_VERIFICAR_PASSWORD_SP (
P_CORREO IN VARCHAR2,
P_CONTRASENA IN VARCHAR2,
P_RESULTADO OUT VARCHAR2
)
IS
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT
FROM FIDE_USUARIO_TB
WHERE correo = P_CORREO
AND contrasena = P_CONTRASENA;
IF V_COUNT = 1 THEN
P_RESULTADO := 'VALIDO';
ELSE
P_RESULTADO := 'INCORRECTO';
END IF;
END;
/
-- 3 FIDE_CATEGORIA_TB
-- Insertar una categoría
CREATE OR REPLACE PROCEDURE FIDE_CATEGORIA_INSERTAR_SP (
P_ID_CATEGORIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_CATEGORIA_TB (id_categoria, nombre)
VALUES (P_ID_CATEGORIA, P_NOMBRE);
END;
/
-- Actualizar una categoría
CREATE OR REPLACE PROCEDURE FIDE_CATEGORIA_ACTUALIZAR_SP (
P_ID_CATEGORIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_CATEGORIA_TB
SET nombre = P_NOMBRE
WHERE id_categoria = P_ID_CATEGORIA;
END;
/
-- Eliminar una categoría
CREATE OR REPLACE PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_CATEGORIA_TB
WHERE id_categoria = P_ID;
END;
/
-- Obtener una categoría por ID
CREATE OR REPLACE PROCEDURE FIDE_CATEGORIA_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_CATEGORIA_TB
WHERE id_categoria = P_ID;
END;
/
-- 4 FIDE_UNIDAD_MEDIDA_TB
-- Insertar una unidad de medida
CREATE OR REPLACE PROCEDURE FIDE_UNIDAD_MEDIDA_INSERTAR_SP (
P_ID_UNIDAD_MEDIDA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_UNIDAD_MEDIDA_TB (id_unidad_medida, nombre)
VALUES (P_ID_UNIDAD_MEDIDA, P_NOMBRE);
END;
/
-- Actualizar una unidad de medida
CREATE OR REPLACE PROCEDURE FIDE_UNIDAD_MEDIDA_ACTUALIZAR_SP (
P_ID_UNIDAD_MEDIDA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_UNIDAD_MEDIDA_TB
SET nombre = P_NOMBRE
WHERE id_unidad_medida = P_ID_UNIDAD_MEDIDA;
END;
/
-- Eliminar una unidad de medida
CREATE OR REPLACE PROCEDURE FIDE_UNIDAD_MEDIDA_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_UNIDAD_MEDIDA_TB
WHERE id_unidad_medida = P_ID;
END;
/
-- Obtener una unidad de medida por ID
CREATE OR REPLACE PROCEDURE FIDE_UNIDAD_MEDIDA_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_UNIDAD_MEDIDA_TB
WHERE id_unidad_medida = P_ID;
END;
/
-- 5 FIDE_PRODUCTO_TB
-- Insertar un producto
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_INSERTAR_SP (
P_ID_PRODUCTO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_DESCRIPCION IN VARCHAR2,
P_PRECIO IN NUMBER,
P_ID_CATEGORIA IN NUMBER,
P_ID_UNIDAD_MEDIDA IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_PRODUCTO_TB (
id_producto, nombre, descripcion, precio, id_categoria, id_unidad_medida
) VALUES (
P_ID_PRODUCTO, P_NOMBRE, P_DESCRIPCION, P_PRECIO, P_ID_CATEGORIA, P_ID_UNIDAD_MEDIDA
);
END;
/
-- Actualizar un producto
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_ACTUALIZAR_SP (
P_ID_PRODUCTO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_DESCRIPCION IN VARCHAR2,
P_PRECIO IN NUMBER,
P_ID_CATEGORIA IN NUMBER,
P_ID_UNIDAD_MEDIDA IN NUMBER
) IS
BEGIN
UPDATE FIDE_PRODUCTO_TB
SET nombre = P_NOMBRE,
descripcion = P_DESCRIPCION,
precio = P_PRECIO,
id_categoria = P_ID_CATEGORIA,
id_unidad_medida = P_ID_UNIDAD_MEDIDA
WHERE id_producto = P_ID_PRODUCTO;
END;
/
-- Eliminar un producto
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_PRODUCTO_TB
WHERE id_producto = P_ID;
END;
/
-- Obtener un producto por ID
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_PRODUCTO_TB
WHERE id_producto = P_ID;
END;
/
-- 6 FIDE_CLIENTE_TB
-- Insertar un cliente
CREATE OR REPLACE PROCEDURE FIDE_CLIENTE_INSERTAR_SP (
P_ID_CLIENTE IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_TELEFONO IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_CLIENTE_TB (
id_cliente, nombre, correo, telefono
) VALUES (
P_ID_CLIENTE, P_NOMBRE, P_CORREO, P_TELEFONO
);
END;
/
-- Actualizar un cliente
CREATE OR REPLACE PROCEDURE FIDE_CLIENTE_ACTUALIZAR_SP (
P_ID_CLIENTE IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_TELEFONO IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_CLIENTE_TB
SET nombre = P_NOMBRE,
correo = P_CORREO,
telefono = P_TELEFONO
WHERE id_cliente = P_ID_CLIENTE;
END;
/
-- Eliminar un cliente
CREATE OR REPLACE PROCEDURE FIDE_CLIENTE_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_CLIENTE_TB
WHERE id_cliente = P_ID;
END;
/
-- Obtener un cliente por ID
CREATE OR REPLACE PROCEDURE FIDE_CLIENTE_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_CLIENTE_TB
WHERE id_cliente = P_ID;
END;
/
-- 7 FIDE_DIRECCION_TB
-- Insertar una dirección
CREATE OR REPLACE PROCEDURE FIDE_DIRECCION_INSERTAR_SP (
P_ID_DIRECCION IN NUMBER,
P_ID_CLIENTE IN NUMBER,
P_DIRECCION IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_DIRECCION_TB (
id_direccion, id_cliente, direccion
) VALUES (
P_ID_DIRECCION, P_ID_CLIENTE, P_DIRECCION
);
END;
/
-- Actualizar una dirección
CREATE OR REPLACE PROCEDURE FIDE_DIRECCION_ACTUALIZAR_SP (
P_ID_DIRECCION IN NUMBER,
P_ID_CLIENTE IN NUMBER,
P_DIRECCION IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_DIRECCION_TB
SET id_cliente = P_ID_CLIENTE,
direccion = P_DIRECCION
WHERE id_direccion = P_ID_DIRECCION;
END;
/
-- Eliminar una dirección
CREATE OR REPLACE PROCEDURE FIDE_DIRECCION_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_DIRECCION_TB
WHERE id_direccion = P_ID;
END;
/
-- Obtener una dirección por ID
CREATE OR REPLACE PROCEDURE FIDE_DIRECCION_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_DIRECCION_TB
WHERE id_direccion = P_ID;
END;
/
-- 8 FIDE_PROVINCIA_TB
-- Insertar una provincia
CREATE OR REPLACE PROCEDURE FIDE_PROVINCIA_INSERTAR_SP (
P_ID_PROVINCIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_PROVINCIA_TB (
id_provincia, nombre
) VALUES (
P_ID_PROVINCIA, P_NOMBRE
);
END;
/
-- Actualizar una provincia
CREATE OR REPLACE PROCEDURE FIDE_PROVINCIA_ACTUALIZAR_SP (
P_ID_PROVINCIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_PROVINCIA_TB
SET nombre = P_NOMBRE
WHERE id_provincia = P_ID_PROVINCIA;
END;
/
-- Eliminar una provincia
CREATE OR REPLACE PROCEDURE FIDE_PROVINCIA_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_PROVINCIA_TB
WHERE id_provincia = P_ID;
END;
/
-- Obtener una provincia por ID
CREATE OR REPLACE PROCEDURE FIDE_PROVINCIA_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_PROVINCIA_TB
WHERE id_provincia = P_ID;
END;
/
-- 9 FIDE_CANTON_TB
-- Insertar un cantón
CREATE OR REPLACE PROCEDURE FIDE_CANTON_INSERTAR_SP (
P_ID_CANTON IN NUMBER,
P_ID_PROVINCIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_CANTON_TB (
id_canton, id_provincia, nombre
) VALUES (
P_ID_CANTON, P_ID_PROVINCIA, P_NOMBRE
);
END;
/
-- Actualizar un cantón
CREATE OR REPLACE PROCEDURE FIDE_CANTON_ACTUALIZAR_SP (
P_ID_CANTON IN NUMBER,
P_ID_PROVINCIA IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_CANTON_TB
SET id_provincia = P_ID_PROVINCIA,
nombre = P_NOMBRE
WHERE id_canton = P_ID_CANTON;
END;
/
-- Eliminar un cantón
CREATE OR REPLACE PROCEDURE FIDE_CANTON_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_CANTON_TB
WHERE id_canton = P_ID;
END;
/
-- Obtener un cantón por ID
CREATE OR REPLACE PROCEDURE FIDE_CANTON_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_CANTON_TB
WHERE id_canton = P_ID;
END;
/
-- 10 FIDE_DISTRITO_TB
-- Insertar un distrito
CREATE OR REPLACE PROCEDURE FIDE_DISTRITO_INSERTAR_SP (
P_ID_DISTRITO IN NUMBER,
P_ID_CANTON IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_DISTRITO_TB (
id_distrito, id_canton, nombre
) VALUES (
P_ID_DISTRITO, P_ID_CANTON, P_NOMBRE
);
END;
/
-- Actualizar un distrito
CREATE OR REPLACE PROCEDURE FIDE_DISTRITO_ACTUALIZAR_SP (
P_ID_DISTRITO IN NUMBER,
P_ID_CANTON IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_DISTRITO_TB
SET id_canton = P_ID_CANTON,
nombre = P_NOMBRE
WHERE id_distrito = P_ID_DISTRITO;
END;
/
-- Eliminar un distrito
CREATE OR REPLACE PROCEDURE FIDE_DISTRITO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_DISTRITO_TB
WHERE id_distrito = P_ID;
END;
/
-- Obtener un distrito por ID
CREATE OR REPLACE PROCEDURE FIDE_DISTRITO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_DISTRITO_TB
WHERE id_distrito = P_ID;
END;
/
-- 11 FIDE_ESTADO_PEDIDO_TB
-- Insertar un estado de pedido
CREATE OR REPLACE PROCEDURE FIDE_ESTADO_PEDIDO_INSERTAR_SP (
P_ID_ESTADO IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_ESTADO_PEDIDO_TB (
id_estado, nombre
) VALUES (
P_ID_ESTADO, P_NOMBRE
);
END;
/
-- Actualizar un estado de pedido
CREATE OR REPLACE PROCEDURE FIDE_ESTADO_PEDIDO_ACTUALIZAR_SP (
P_ID_ESTADO IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_ESTADO_PEDIDO_TB
SET nombre = P_NOMBRE
WHERE id_estado = P_ID_ESTADO;
END;
/
-- Eliminar un estado de pedido
CREATE OR REPLACE PROCEDURE FIDE_ESTADO_PEDIDO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_ESTADO_PEDIDO_TB
WHERE id_estado = P_ID;
END;
/
-- Obtener un estado de pedido por ID
CREATE OR REPLACE PROCEDURE FIDE_ESTADO_PEDIDO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_ESTADO_PEDIDO_TB
WHERE id_estado = P_ID;
END;
/
-- 12 FIDE_PEDIDO_TB
-- Insertar un pedido
CREATE OR REPLACE PROCEDURE FIDE_PEDIDO_INSERTAR_SP (
P_ID_PEDIDO IN NUMBER,
P_FECHA_PEDIDO IN DATE,
P_CANTIDAD IN NUMBER,
P_PRECIO_UNITARIO IN NUMBER,
P_SUBTOTAL IN NUMBER,
P_TOTAL IN NUMBER,
P_ID_FACTURA IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_ID_ESTADO IN NUMBER,
P_ID_USUARIO IN NUMBER,
P_ID_CLIENTE IN NUMBER,
P_ID_DIRECCION IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_PEDIDO_TB (
id_pedido, fecha_pedido, cantidad, precio_unitario,
subtotal, total, id_factura, id_producto,
id_estado, id_usuario, id_cliente, id_direccion
) VALUES (
P_ID_PEDIDO, P_FECHA_PEDIDO, P_CANTIDAD, P_PRECIO_UNITARIO,
P_SUBTOTAL, P_TOTAL, P_ID_FACTURA, P_ID_PRODUCTO,
P_ID_ESTADO, P_ID_USUARIO, P_ID_CLIENTE, P_ID_DIRECCION
);
END;
/
-- Actualizar un pedido
CREATE OR REPLACE PROCEDURE FIDE_PEDIDO_ACTUALIZAR_SP (
P_ID_PEDIDO IN NUMBER,
P_FECHA_PEDIDO IN DATE,
P_CANTIDAD IN NUMBER,
P_PRECIO_UNITARIO IN NUMBER,
P_SUBTOTAL IN NUMBER,
P_TOTAL IN NUMBER,
P_ID_FACTURA IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_ID_ESTADO IN NUMBER,
P_ID_USUARIO IN NUMBER,
P_ID_CLIENTE IN NUMBER,
P_ID_DIRECCION IN NUMBER
) IS
BEGIN
UPDATE FIDE_PEDIDO_TB
SET fecha_pedido = P_FECHA_PEDIDO,
cantidad = P_CANTIDAD,
precio_unitario = P_PRECIO_UNITARIO,
subtotal = P_SUBTOTAL,
total = P_TOTAL,
id_factura = P_ID_FACTURA,
id_producto = P_ID_PRODUCTO,
id_estado = P_ID_ESTADO,
id_usuario = P_ID_USUARIO,
id_cliente = P_ID_CLIENTE,
id_direccion = P_ID_DIRECCION
WHERE id_pedido = P_ID_PEDIDO;
END;
/
-- Eliminar un pedido
CREATE OR REPLACE PROCEDURE FIDE_PEDIDO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_PEDIDO_TB
WHERE id_pedido = P_ID;
END;
/
-- Obtener un pedido por ID
CREATE OR REPLACE PROCEDURE FIDE_PEDIDO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_PEDIDO_TB
WHERE id_pedido = P_ID;
END;
/
-- 13 FIDE_INGRESO_TB
-- Insertar un ingreso
CREATE OR REPLACE PROCEDURE FIDE_INGRESO_INSERTAR_SP (
P_ID_INGRESO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_CANTIDAD IN NUMBER,
P_FECHA IN DATE
) IS
BEGIN
INSERT INTO FIDE_INGRESO_TB (
id_ingreso, id_producto, cantidad, fecha
) VALUES (
P_ID_INGRESO, P_ID_PRODUCTO, P_CANTIDAD, P_FECHA
);
END;
/
-- Actualizar un ingreso
CREATE OR REPLACE PROCEDURE FIDE_INGRESO_ACTUALIZAR_SP (
P_ID_INGRESO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_CANTIDAD IN NUMBER,
P_FECHA IN DATE
) IS
BEGIN
UPDATE FIDE_INGRESO_TB
SET id_producto = P_ID_PRODUCTO,
cantidad = P_CANTIDAD,
fecha = P_FECHA
WHERE id_ingreso = P_ID_INGRESO;
END;
/
-- Eliminar un ingreso
CREATE OR REPLACE PROCEDURE FIDE_INGRESO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_INGRESO_TB
WHERE id_ingreso = P_ID;
END;
/
-- Obtener un ingreso por ID
CREATE OR REPLACE PROCEDURE FIDE_INGRESO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_INGRESO_TB
WHERE id_ingreso = P_ID;
END;
/
-- 14 FIDE_EGRESO_TB
-- Insertar un egreso
CREATE OR REPLACE PROCEDURE FIDE_EGRESO_INSERTAR_SP (
P_ID_EGRESO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_CANTIDAD IN NUMBER,
P_FECHA IN DATE
) IS
BEGIN
INSERT INTO FIDE_EGRESO_TB (
id_egreso, id_producto, cantidad, fecha
) VALUES (
P_ID_EGRESO, P_ID_PRODUCTO, P_CANTIDAD, P_FECHA
);
END;
/
-- Actualizar un egreso
CREATE OR REPLACE PROCEDURE FIDE_EGRESO_ACTUALIZAR_SP (
P_ID_EGRESO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_CANTIDAD IN NUMBER,
P_FECHA IN DATE
) IS
BEGIN
UPDATE FIDE_EGRESO_TB
SET id_producto = P_ID_PRODUCTO,
cantidad = P_CANTIDAD,
fecha = P_FECHA
WHERE id_egreso = P_ID_EGRESO;
END;
/
-- Eliminar un egreso
CREATE OR REPLACE PROCEDURE FIDE_EGRESO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_EGRESO_TB
WHERE id_egreso = P_ID;
END;
/
-- Obtener un egreso por ID
CREATE OR REPLACE PROCEDURE FIDE_EGRESO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_EGRESO_TB
WHERE id_egreso = P_ID;
END;
/
-- 15 FIDE_INSUMO_TB
-- Insertar un insumo
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_INSERTAR_SP (
P_ID_INSUMO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_DESCRIPCION IN VARCHAR2,
P_ID_UNIDAD_MEDIDA IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_INSUMO_TB (
id_insumo, nombre, descripcion, id_unidad_medida
) VALUES (
P_ID_INSUMO, P_NOMBRE, P_DESCRIPCION, P_ID_UNIDAD_MEDIDA
);
END;
/
-- Actualizar un insumo
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_ACTUALIZAR_SP (
P_ID_INSUMO IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_DESCRIPCION IN VARCHAR2,
P_ID_UNIDAD_MEDIDA IN NUMBER
) IS
BEGIN
UPDATE FIDE_INSUMO_TB
SET nombre = P_NOMBRE,
descripcion = P_DESCRIPCION,
id_unidad_medida = P_ID_UNIDAD_MEDIDA
WHERE id_insumo = P_ID_INSUMO;
END;
/
-- Eliminar un insumo
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_INSUMO_TB
WHERE id_insumo = P_ID;
END;
/
-- Obtener un insumo por ID
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_INSUMO_TB
WHERE id_insumo = P_ID;
END;
/
-- Obtener datos de insumo por ID
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_OBTENER_POR_ID_SP (
P_ID_INSUMO IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
)
IS
BEGIN
OPEN P_RESULTADO FOR
SELECT id_insumo, nombre, descripcion, id_unidad_medida
FROM FIDE_INSUMO_TB
WHERE id_insumo = P_ID_INSUMO;
END;
/
-- Obtener datos de insumo por nombre
CREATE OR REPLACE PROCEDURE FIDE_INSUMO_OBTENER_POR_NOMBRE_SP (
P_NOMBRE IN VARCHAR2,
P_RESULTADO OUT SYS_REFCURSOR
)
IS
BEGIN
OPEN P_RESULTADO FOR
SELECT id_insumo, nombre, descripcion, id_unidad_medida
FROM FIDE_INSUMO_TB
WHERE UPPER(nombre) = UPPER(P_NOMBRE);
END;
/
-- 16 FIDE_PROVEEDOR_TB
-- Insertar un proveedor
CREATE OR REPLACE PROCEDURE FIDE_PROVEEDOR_INSERTAR_SP (
P_ID_PROVEEDOR IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_TELEFONO IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_PROVEEDOR_TB (
id_proveedor, nombre, correo, telefono
) VALUES (
P_ID_PROVEEDOR, P_NOMBRE, P_CORREO, P_TELEFONO
);
END;
/
-- Actualizar un proveedor
CREATE OR REPLACE PROCEDURE FIDE_PROVEEDOR_ACTUALIZAR_SP (
P_ID_PROVEEDOR IN NUMBER,
P_NOMBRE IN VARCHAR2,
P_CORREO IN VARCHAR2,
P_TELEFONO IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_PROVEEDOR_TB
SET nombre = P_NOMBRE,
correo = P_CORREO,
telefono = P_TELEFONO
WHERE id_proveedor = P_ID_PROVEEDOR;
END;
/
-- Eliminar un proveedor
CREATE OR REPLACE PROCEDURE FIDE_PROVEEDOR_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_PROVEEDOR_TB
WHERE id_proveedor = P_ID;
END;
/
-- Obtener un proveedor por ID
CREATE OR REPLACE PROCEDURE FIDE_PROVEEDOR_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_PROVEEDOR_TB
WHERE id_proveedor = P_ID;
END;
/
-- 17 FIDE_ORDEN_COMPRA_TB
-- Insertar una orden de compra
CREATE OR REPLACE PROCEDURE FIDE_ORDEN_COMPRA_INSERTAR_SP (
P_ID_ORDEN_COMPRA IN NUMBER,
P_ID_PROVEEDOR IN NUMBER,
P_FECHA IN DATE,
P_TOTAL IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_ORDEN_COMPRA_TB (
id_orden_compra, id_proveedor, fecha, total
) VALUES (
P_ID_ORDEN_COMPRA, P_ID_PROVEEDOR, P_FECHA, P_TOTAL
);
END;
/
-- Actualizar una orden de compra
CREATE OR REPLACE PROCEDURE FIDE_ORDEN_COMPRA_ACTUALIZAR_SP (
P_ID_ORDEN_COMPRA IN NUMBER,
P_ID_PROVEEDOR IN NUMBER,
P_FECHA IN DATE,
P_TOTAL IN NUMBER
) IS
BEGIN
UPDATE FIDE_ORDEN_COMPRA_TB
SET id_proveedor = P_ID_PROVEEDOR,
fecha = P_FECHA,
total = P_TOTAL
WHERE id_orden_compra = P_ID_ORDEN_COMPRA;
END;
/
-- Eliminar una orden de compra
CREATE OR REPLACE PROCEDURE FIDE_ORDEN_COMPRA_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_ORDEN_COMPRA_TB
WHERE id_orden_compra = P_ID;
END;
/
-- Obtener una orden de compra por ID
CREATE OR REPLACE PROCEDURE FIDE_ORDEN_COMPRA_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_ORDEN_COMPRA_TB
WHERE id_orden_compra = P_ID;
END;
/
-- 18 FIDE_PRODUCTO_INSUMO_TB
-- Insertar relación producto-insumo
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_INSUMO_INSERTAR_SP (
P_ID_PRODUCTO_INSUMO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_ID_INSUMO IN NUMBER
) IS
BEGIN
INSERT INTO FIDE_PRODUCTO_INSUMO_TB (
id_producto_insumo, id_producto, id_insumo
) VALUES (
P_ID_PRODUCTO_INSUMO, P_ID_PRODUCTO, P_ID_INSUMO
);
END;
/
-- Actualizar relación producto-insumo
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_INSUMO_ACTUALIZAR_SP (
P_ID_PRODUCTO_INSUMO IN NUMBER,
P_ID_PRODUCTO IN NUMBER,
P_ID_INSUMO IN NUMBER
) IS
BEGIN
UPDATE FIDE_PRODUCTO_INSUMO_TB
SET id_producto = P_ID_PRODUCTO,
id_insumo = P_ID_INSUMO
WHERE id_producto_insumo = P_ID_PRODUCTO_INSUMO;
END;
/
-- Eliminar relación producto-insumo
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_INSUMO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_PRODUCTO_INSUMO_TB
WHERE id_producto_insumo = P_ID;
END;
/
-- Obtener relación producto-insumo por ID
CREATE OR REPLACE PROCEDURE FIDE_PRODUCTO_INSUMO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_PRODUCTO_INSUMO_TB
WHERE id_producto_insumo = P_ID;
END;
/
-- 19 FIDE_TIPO_EDIFICIO_TB
-- Insertar un tipo de edificio
CREATE OR REPLACE PROCEDURE FIDE_TIPO_EDIFICIO_INSERTAR_SP (
P_ID_TIPO_EDIFICIO IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
INSERT INTO FIDE_TIPO_EDIFICIO_TB (
id_tipo_edificio, nombre
) VALUES (
P_ID_TIPO_EDIFICIO, P_NOMBRE
);
END;
/
-- Actualizar un tipo de edificio
CREATE OR REPLACE PROCEDURE FIDE_TIPO_EDIFICIO_ACTUALIZAR_SP (
P_ID_TIPO_EDIFICIO IN NUMBER,
P_NOMBRE IN VARCHAR2
) IS
BEGIN
UPDATE FIDE_TIPO_EDIFICIO_TB
SET nombre = P_NOMBRE
WHERE id_tipo_edificio = P_ID_TIPO_EDIFICIO;
END;
/
-- Eliminar un tipo de edificio
CREATE OR REPLACE PROCEDURE FIDE_TIPO_EDIFICIO_ELIMINAR_SP (
P_ID IN NUMBER
) IS
BEGIN
DELETE FROM FIDE_TIPO_EDIFICIO_TB
WHERE id_tipo_edificio = P_ID;
END;
/
-- Obtener un tipo de edificio por ID
CREATE OR REPLACE PROCEDURE FIDE_TIPO_EDIFICIO_OBTENER_POR_ID_SP (
P_ID IN NUMBER,
P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
OPEN P_RESULTADO FOR
SELECT * FROM FIDE_TIPO_EDIFICIO_TB
WHERE id_tipo_edificio = P_ID;
END;
/
---20 FIDE_MESA
  
--CRUDs de mesa
--Eliminar
CREATE OR REPLACE PROCEDURE FIDE_MESA_DELETE_SP (
    P_ID_MESA IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_MESA_TB
    WHERE ID_MESA = P_ID_MESA;
END;
/
---Actualizar
CREATE OR REPLACE PROCEDURE FIDE_MESA_UPDATE_SP (
    P_ID_MESA IN NUMBER,
    P_NUMERO_MESA IN NUMBER,
    P_CAPACIDAD IN NUMBER,
    P_UBICACION IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_MESA_TB
    SET NUMERO_MESA = P_NUMERO_MESA,
        CAPACIDAD = P_CAPACIDAD,
        UBICACION = P_UBICACION
    WHERE ID_MESA = P_ID_MESA;
END;
/
---Consultar
CREATE OR REPLACE PROCEDURE FIDE_MESA_READ_SP (
    P_ID_MESA IN NUMBER,
    P_RESULTADO OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_RESULTADO FOR
    SELECT * FROM FIDE_MESA_TB
    WHERE ID_MESA = P_ID_MESA;
END;
/
---Insertar
CREATE OR REPLACE PROCEDURE FIDE_MESA_INSERT_SP (
    P_ID_MESA IN NUMBER,
    P_NUMERO_MESA IN NUMBER,
    P_CAPACIDAD IN NUMBER,
    P_UBICACION IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_MESA_TB (ID_MESA, NUMERO_MESA, CAPACIDAD, UBICACION)
    VALUES (P_ID_MESA, P_NUMERO_MESA, P_CAPACIDAD, P_UBICACION);
END;
/
-- OBTENER_USUARIOS_TODOS
CREATE OR REPLACE PROCEDURE FIDE_USUARIO_OBTENER_TODOS_SP (
    P_RESULTADO OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN P_RESULTADO FOR
    SELECT id_usuario, nombre, correo, id_rol
    FROM FIDE_USUARIO_TB;
END;
/


















--paquetes y Cursores Daniel*
-- Gestion de productos --

CREATE OR REPLACE PACKAGE FIDE_PRODUCTO_PKG AS
    PROCEDURE insertar_producto(
        P_ID_PRODUCTO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_ID_CATEGORIA IN NUMBER,
        P_ID_UNIDAD_MEDIDA IN NUMBER
    );

    PROCEDURE actualizar_producto(
        P_ID_PRODUCTO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_ID_CATEGORIA IN NUMBER,
        P_ID_UNIDAD_MEDIDA IN NUMBER
    );

    PROCEDURE eliminar_producto(P_ID IN NUMBER);
    PROCEDURE obtener_producto_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_todos_los_productos(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_PRODUCTO_PKG;
/


-- Cuerpo del Paquete de Productos
CREATE OR REPLACE PACKAGE BODY FIDE_PRODUCTO_PKG AS
    PROCEDURE insertar_producto(
        P_ID_PRODUCTO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_ID_CATEGORIA IN NUMBER,
        P_ID_UNIDAD_MEDIDA IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_PRODUCTO_TB (
            id_producto, nombre, descripcion, precio, id_categoria, id_unidad_medida
        ) VALUES (
            P_ID_PRODUCTO, P_NOMBRE, P_DESCRIPCION, P_PRECIO, P_ID_CATEGORIA, P_ID_UNIDAD_MEDIDA
        );
    END insertar_producto;

    PROCEDURE actualizar_producto(
        P_ID_PRODUCTO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_ID_CATEGORIA IN NUMBER,
        P_ID_UNIDAD_MEDIDA IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_PRODUCTO_TB
        SET nombre = P_NOMBRE,
            descripcion = P_DESCRIPCION,
            precio = P_PRECIO,
            id_categoria = P_ID_CATEGORIA,
            id_unidad_medida = P_ID_UNIDAD_MEDIDA
        WHERE id_producto = P_ID_PRODUCTO;
    END actualizar_producto;

    PROCEDURE eliminar_producto(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_PRODUCTO_TB
        WHERE id_producto = P_ID;
    END eliminar_producto;

    PROCEDURE obtener_producto_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_PRODUCTO_TB
            WHERE id_producto = P_ID;
    END obtener_producto_por_id;

    PROCEDURE obtener_todos_los_productos(P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_PRODUCTO_TB;
    END obtener_todos_los_productos;
END FIDE_PRODUCTO_PKG;
/

-- Gestion de categorias -- 

CREATE OR REPLACE PACKAGE FIDE_CATEGORIA_PKG AS
    PROCEDURE insertar_categoria(
        P_ID_CATEGORIA IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE actualizar_categoria(
        P_ID_CATEGORIA IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE eliminar_categoria(P_ID IN NUMBER);
    PROCEDURE obtener_categoria_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_todas_las_categorias(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_CATEGORIA_PKG;
/

-- Cuerpo del Paquete de Categorías
CREATE OR REPLACE PACKAGE BODY FIDE_CATEGORIA_PKG AS
    PROCEDURE insertar_categoria(
        P_ID_CATEGORIA IN NUMBER,
        P_NOMBRE IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO FIDE_CATEGORIA_TB (id_categoria, nombre)
        VALUES (P_ID_CATEGORIA, P_NOMBRE);
    END insertar_categoria;

    PROCEDURE actualizar_categoria(
        P_ID_CATEGORIA IN NUMBER,
        P_NOMBRE IN VARCHAR2
    ) IS
    BEGIN
        UPDATE FIDE_CATEGORIA_TB
        SET nombre = P_NOMBRE
        WHERE id_categoria = P_ID_CATEGORIA;
    END actualizar_categoria;

    PROCEDURE eliminar_categoria(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_CATEGORIA_TB
        WHERE id_categoria = P_ID;
    END eliminar_categoria;

    PROCEDURE obtener_categoria_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_CATEGORIA_TB
            WHERE id_categoria = P_ID;
    END obtener_categoria_por_id;

    PROCEDURE obtener_todas_las_categorias(P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_CATEGORIA_TB;
    END obtener_todas_las_categorias;
END FIDE_CATEGORIA_PKG;
/


-- Gestion de usuarios --

CREATE OR REPLACE PACKAGE FIDE_USUARIO_PKG AS
    PROCEDURE insertar_usuario(
        P_ID_USUARIO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASENA IN VARCHAR2,
        P_ID_ROL IN NUMBER
    );

    PROCEDURE actualizar_usuario(
        P_ID_USUARIO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASENA IN VARCHAR2,
        P_ID_ROL IN NUMBER
    );

    PROCEDURE eliminar_usuario(P_ID IN NUMBER);
    PROCEDURE obtener_usuario_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_todos_los_usuarios(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_USUARIO_PKG;
/


-- Cuerpo del Paquete de Usuarios
CREATE OR REPLACE PACKAGE BODY FIDE_USUARIO_PKG AS
    -- Procedimiento para insertar un nuevo usuario
    PROCEDURE insertar_usuario(
        P_ID_USUARIO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASENA IN VARCHAR2,
        P_ID_ROL IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_USUARIO_TB (
            id_usuario, nombre, correo, contrasena, id_rol
        ) VALUES (
            P_ID_USUARIO, P_NOMBRE, P_CORREO, P_CONTRASENA, P_ID_ROL
        );
    END insertar_usuario;

    -- Procedimiento para actualizar un usuario
    PROCEDURE actualizar_usuario(
        P_ID_USUARIO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASENA IN VARCHAR2,
        P_ID_ROL IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET nombre = P_NOMBRE,
            correo = P_CORREO,
            contrasena = P_CONTRASENA,
            id_rol = P_ID_ROL
        WHERE id_usuario = P_ID_USUARIO;
    END actualizar_usuario;

    -- Procedimiento para eliminar un usuario
    PROCEDURE eliminar_usuario(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_USUARIO_TB
        WHERE id_usuario = P_ID;
    END eliminar_usuario;

    -- Procedimiento para obtener un usuario por su ID
    PROCEDURE obtener_usuario_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_USUARIO_TB
            WHERE id_usuario = P_ID;
    END obtener_usuario_por_id;

    -- Procedimiento para obtener todos los usuarios
    PROCEDURE obtener_todos_los_usuarios(P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_USUARIO_TB;
    END obtener_todos_los_usuarios;
END FIDE_USUARIO_PKG;
/

-- Gestion de PEDIDO --

CREATE OR REPLACE PACKAGE FIDE_PEDIDO_PKG AS
    PROCEDURE registrar_pedido(
        P_ID_PEDIDO IN NUMBER,
        P_ID_MESA IN NUMBER,
        P_CLIENTE IN VARCHAR2,
        P_FECHA IN DATE,
        P_TOTAL IN NUMBER,
        P_PAGADO IN NUMBER,
        P_ID_USUARIO IN NUMBER
    );

    PROCEDURE actualizar_pedido(
        P_ID_PEDIDO IN NUMBER,
        P_ID_MESA IN NUMBER,
        P_CLIENTE IN VARCHAR2,
        P_FECHA IN DATE,
        P_TOTAL IN NUMBER,
        P_PAGADO IN NUMBER,
        P_ID_USUARIO IN NUMBER
    );

    PROCEDURE eliminar_pedido(P_ID IN NUMBER);

    PROCEDURE obtener_pedido_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE obtener_pedidos_por_fecha(P_FECHA_INICIO IN DATE, P_FECHA_FIN IN DATE, P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE obtener_pedidos_por_usuario(P_ID_USUARIO IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_PEDIDO_PKG;
/






--Corregir---
-- Gestion de insumos --

CREATE OR REPLACE PACKAGE FIDE_INSUMO_PKG AS
    PROCEDURE insertar_insumo(
        P_ID_INSUMO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_CATEGORIA IN NUMBER
    );
    
    PROCEDURE actualizar_insumo(
        P_ID_INSUMO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_CATEGORIA IN NUMBER
    );
    
    PROCEDURE eliminar_insumo(P_ID IN NUMBER);
    PROCEDURE obtener_insumo_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_todos_los_insumos(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_INSUMO_PKG;

/

-- Cuerpo del Paquete de Insumos
CREATE OR REPLACE PACKAGE BODY FIDE_INSUMO_PKG AS
    PROCEDURE insertar_insumo(
        P_ID_INSUMO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_CATEGORIA IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_INSUMO_TB (
            id_insumo, nombre, descripcion, precio, categoria
        ) VALUES (
            P_ID_INSUMO, P_NOMBRE, P_DESCRIPCION, P_PRECIO, P_CATEGORIA
        );
    END insertar_insumo;

    PROCEDURE actualizar_insumo(
        P_ID_INSUMO IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_PRECIO IN NUMBER,
        P_CATEGORIA IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_INSUMO_TB
        SET nombre = P_NOMBRE,
            descripcion = P_DESCRIPCION,
            precio = P_PRECIO,
            categoria = P_CATEGORIA
        WHERE id_insumo = P_ID_INSUMO;
    END actualizar_insumo;

    PROCEDURE eliminar_insumo(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_INSUMO_TB
        WHERE id_insumo = P_ID;
    END eliminar_insumo;

    PROCEDURE obtener_insumo_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_insumo IS
            SELECT * FROM FIDE_INSUMO_TB
            WHERE id_insumo = P_ID;
    BEGIN
        OPEN P_RESULTADO FOR c_insumo;
    END obtener_insumo_por_id;

    PROCEDURE obtener_todos_los_insumos(P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_insumos IS
            SELECT * FROM FIDE_INSUMO_TB;
    BEGIN
        OPEN P_RESULTADO FOR c_insumos;
    END obtener_todos_los_insumos;
END FIDE_INSUMO_PKG;
/


-- Gestion de mesas --
CREATE OR REPLACE PACKAGE FIDE_MESA_PKG AS
    -- Declaración del procedimiento para insertar una mesa
    PROCEDURE insertar_mesa(
        P_ID_MESA IN NUMBER,
        P_NUMERO_MESA IN NUMBER,
        P_CAPACIDAD IN NUMBER,
        P_UBICACION IN VARCHAR2
    );

    -- Declaración del procedimiento para actualizar una mesa
    PROCEDURE actualizar_mesa(
        P_ID_MESA IN NUMBER,
        P_NUMERO_MESA IN NUMBER,
        P_CAPACIDAD IN NUMBER,
        P_UBICACION IN VARCHAR2
    );

    -- Declaración del procedimiento para eliminar una mesa
    PROCEDURE eliminar_mesa(P_ID IN NUMBER);

    -- Declaración del procedimiento para obtener una mesa por su ID
    PROCEDURE obtener_mesa_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);

    -- Declaración del procedimiento para obtener todas las mesas
    PROCEDURE obtener_todas_las_mesas(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_MESA_PKG;
/
--Paquete mesa
CREATE OR REPLACE PACKAGE BODY FIDE_MESA_PKG AS
    -- Procedimiento para insertar una mesa
    PROCEDURE insertar_mesa(
        P_ID_MESA IN NUMBER,
        P_NUMERO_MESA IN NUMBER,
        P_CAPACIDAD IN NUMBER,
        P_UBICACION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO FIDE_MESA_TB (
            ID_MESA, NUMERO_MESA, CAPACIDAD, UBICACION
        ) VALUES (
            P_ID_MESA, P_NUMERO_MESA, P_CAPACIDAD, P_UBICACION
        );
    END insertar_mesa;

    -- Procedimiento para actualizar una mesa
    PROCEDURE actualizar_mesa(
        P_ID_MESA IN NUMBER,
        P_NUMERO_MESA IN NUMBER,
        P_CAPACIDAD IN NUMBER,
        P_UBICACION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE FIDE_MESA_TB
        SET NUMERO_MESA = P_NUMERO_MESA,
            CAPACIDAD = P_CAPACIDAD,
            UBICACION = P_UBICACION
        WHERE ID_MESA = P_ID_MESA;
    END actualizar_mesa;

    -- Procedimiento para eliminar una mesa
    PROCEDURE eliminar_mesa(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_MESA_TB
        WHERE ID_MESA = P_ID;
    END eliminar_mesa;

    -- Procedimiento para obtener una mesa por su ID
    PROCEDURE obtener_mesa_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_MESA_TB
            WHERE ID_MESA = P_ID;
    END obtener_mesa_por_id;

    -- Procedimiento para obtener todas las mesas
    PROCEDURE obtener_todas_las_mesas(P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_MESA_TB;
    END obtener_todas_las_mesas;

END FIDE_MESA_PKG;
/


-- Paquete de Especificación de Clientes
CREATE OR REPLACE PACKAGE FIDE_CLIENTE_PKG AS
    PROCEDURE insertar_cliente(
        P_ID_CLIENTE IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2
    );

    PROCEDURE actualizar_cliente(
        P_ID_CLIENTE IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2
    );

    PROCEDURE eliminar_cliente(P_ID IN NUMBER);
    PROCEDURE obtener_cliente_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_todos_los_clientes(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_CLIENTE_PKG;
/

-- Cuerpo del Paquete de Clientes
CREATE OR REPLACE PACKAGE BODY FIDE_CLIENTE_PKG AS
    -- Procedimiento para insertar un cliente
    PROCEDURE insertar_cliente(
        P_ID_CLIENTE IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO FIDE_CLIENTE_TB (
            id_cliente, nombre, correo, telefono
        ) VALUES (
            P_ID_CLIENTE, P_NOMBRE, P_CORREO, P_TELEFONO
        );
    END insertar_cliente;

    -- Procedimiento para actualizar un cliente
    PROCEDURE actualizar_cliente(
        P_ID_CLIENTE IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2
    ) IS
    BEGIN
        UPDATE FIDE_CLIENTE_TB
        SET nombre = P_NOMBRE,
            correo = P_CORREO,
            telefono = P_TELEFONO
        WHERE id_cliente = P_ID_CLIENTE;
    END actualizar_cliente;

    -- Procedimiento para eliminar un cliente
    PROCEDURE eliminar_cliente(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM FIDE_CLIENTE_TB
        WHERE id_cliente = P_ID;
    END eliminar_cliente;

    -- Procedimiento para obtener un cliente por su ID
    PROCEDURE obtener_cliente_por_id(P_ID IN NUMBER, P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_CLIENTE_TB
            WHERE id_cliente = P_ID;
    END obtener_cliente_por_id;

    -- Procedimiento para obtener todos los clientes
    PROCEDURE obtener_todos_los_clientes(P_RESULTADO OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT * FROM FIDE_CLIENTE_TB;
    END obtener_todos_los_clientes;

END FIDE_CLIENTE_PKG;
/

-- Paquete de Especificación de Informes y Estadísticas
CREATE OR REPLACE PACKAGE FIDE_INFORMES_PKG AS
    PROCEDURE obtener_ventas_por_mes(P_FECHA_INICIO IN DATE, P_FECHA_FIN IN DATE, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_productos_mas_vendidos(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_ingresos_totales(P_FECHA_INICIO IN DATE, P_FECHA_FIN IN DATE, P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE obtener_estadisticas_clientes(P_RESULTADO OUT SYS_REFCURSOR);
END FIDE_INFORMES_PKG;
-- Cuerpo del Paquete de Informes y Estadísticas
CREATE OR REPLACE PACKAGE BODY FIDE_INFORMES_PKG AS

    -- Procedimiento para obtener ventas por mes
    PROCEDURE obtener_ventas_por_mes(P_FECHA_INICIO IN DATE, P_FECHA_FIN IN DATE, P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_ventas IS
            SELECT 
                TO_CHAR(fecha, 'YYYY-MM') AS mes,
                SUM(total) AS total_ventas
            FROM 
                FIDE_VENTA_TB
            WHERE 
                fecha BETWEEN P_FECHA_INICIO AND P_FECHA_FIN
            GROUP BY 
                TO_CHAR(fecha, 'YYYY-MM')
            ORDER BY 
                mes;
    BEGIN
        OPEN P_RESULTADO FOR c_ventas;
    END obtener_ventas_por_mes;

    -- Procedimiento para obtener los productos más vendidos
    PROCEDURE obtener_productos_mas_vendidos(P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_productos IS
            SELECT 
                P.id_producto,
                P.nombre AS nombre_producto,
                SUM(IV.cantidad) AS cantidad_vendida,
                SUM(IV.cantidad * IV.precio) AS ingresos_generados
            FROM 
                FIDE_PRODUCTO_TB P
            JOIN 
                FIDE_INSUMOS_VENTA_TB IV ON P.id_producto = IV.idInsumo
            GROUP BY 
                P.id_producto, P.nombre
            ORDER BY 
                cantidad_vendida DESC;
    BEGIN
        OPEN P_RESULTADO FOR c_productos;
    END obtener_productos_mas_vendidos;

    -- Procedimiento para obtener los ingresos totales
    PROCEDURE obtener_ingresos_totales(P_FECHA_INICIO IN DATE, P_FECHA_FIN IN DATE, P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_ingresos IS
            SELECT 
                SUM(total) AS total_ingresos
            FROM 
                FIDE_VENTA_TB
            WHERE 
                fecha BETWEEN P_FECHA_INICIO AND P_FECHA_FIN;
    BEGIN
        OPEN P_RESULTADO FOR c_ingresos;
    END obtener_ingresos_totales;

    -- Procedimiento para obtener estadísticas de clientes
    PROCEDURE obtener_estadisticas_clientes(P_RESULTADO OUT SYS_REFCURSOR) IS
        CURSOR c_estadisticas IS
            SELECT 
                C.id_cliente,
                C.nombre AS nombre_cliente,
                COUNT(V.id_venta) AS cantidad_pedidos,
                SUM(V.total) AS total_gastado
            FROM 
                FIDE_CLIENTE_TB C
            LEFT JOIN 
                FIDE_VENTA_TB V ON C.id_cliente = V.id_cliente  -- Corrección aquí: debe ser `id_cliente`, no `idMesa`
            GROUP BY 
                C.id_cliente, C.nombre;
    BEGIN
        OPEN P_RESULTADO FOR c_estadisticas;
    END obtener_estadisticas_clientes;

END FIDE_INFORMES_PKG;












